



OHAI Working Group                                              T. Pauly
Internet-Draft                                                     Apple
Intended status: Standards Track                            12 July 2023
Expires: 13 January 2024


                    Streamed Oblivious HTTP Messages
                    draft-ohai-streamed-ohttp-latest

Abstract

   This document defines a variant of the Oblivious HTTP message format
   that allows chunks of requests and responses to be encrypted and
   decrypted before an entire message is processed.  This allows
   "streaming" of Oblivious HTTP messages, which is particularly useful
   for handling very large messages or systems that process messages
   slowly.

About This Document

   This note is to be removed before publishing as an RFC.

   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-ohai-streamed-ohttp/.

   Discussion of this document takes place on the OHAI Working Group
   mailing list (mailto:ohai@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/ohai/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/ohai/.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 13 January 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Request Format
   4.  Response Format
   5.  Encapsulation of Chunks
     5.1.  Request encapsulation
     5.2.  Response encapsulation
   6.  Security Considerations
   7.  IANA Considerations
     7.1.  message/ohttp-streamed-req Media Type
     7.2.  message/ohttp-streamed-res Media Type
   8.  Normative References
   Acknowledgments
   Author's Address

1.  Introduction

   Oblivious HTTP [OHTTP] defines a system for sending HTTP requests and
   responses as encrypted messages.  Clients send requests via a relay
   to a gateway, which is able to decrypt and forward the request to a
   target server.  Responses are encrypted with an ephemeral symmetric
   key by the gateway and sent back to the client via the relay.  The
   messages are protected with Hybrid Public Key Encryption (HPKE;
   [HPKE]), and are intended to prevent the gateway from linking any two
   independent requests to the same client.

   The definition of Oblivious HTTP in [OHTTP] encrypts messages such
   that entire request and response bodies need to be received before
   any of the content can be decrypted.  This is well-suited for many of
   the use cases of Oblivious HTTP, such as DNS queries or metrics
   reporting.

   However, some applications of Oblivious HTTP can benefit from being
   able to encrypt and decrypt parts of the messages in chunks.  If a
   request or response can be processed by a receiver in separate parts,
   and is particularly large or will be generated slowly, then sending a
   stream of encrypted chunks can improve the performance of
   applications.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Request Format

   Streamed OHTTP requests start with key and algorithm IDs, followed by
   chunks of data protected with HPKE.  The final chunk is indicated
   with a length of 0, which means it extends to the end of the outer
   stream.

   Streamed Encapsulated Request {
     Key Identifier (8),
     HPKE KEM ID (16),
     HPKE KDF ID (16),
     HPKE AEAD ID (16),
     Encapsulated KEM Shared Secret (8 * Nenc),
     HPKE-Protected Request Data (..),
   }

   HPKE-Protected Request Data {
     Non-Final Chunk (..),
     Final Chunk Indicator (i) = 0,
     HPKE-Protected Final Chunk (..),
   }

   Non-Final Chunk {
     Length (i) = 1..,
     HPKE-Protected Chunk (..),
   }

               Figure 1: Streamed Encapsulated Request Format

4.  Response Format

   Streamed OHTTP responses start with a nonce, followed by chunks of
   data protected with an AEAD.  The final chunk is indicated with a
   length of 0, which means it extends to the end of the outer stream.

   Streamed Encapsulated Response{
     Nonce (Nk),
     AEAD-Protected Request Data (..),
   }

   AEAD-Protected Request Data {
     Non-Final Chunk (..),
     Final Chunk Indicator (i) = 0,
     AEAD-Protected Final Chunk (..),
   }

   Non-Final Chunk {
     Length (i) = 1..,
     AEAD-Protected Chunk (..),
   }

              Figure 2: Streamed Encapsulated Response Format

5.  Encapsulation of Chunks

   The encapsulation of streamed Oblivious HTTP requests and responses
   uses the same approach as the non-streamed variant, with the
   difference that the body of requests and responses are sealed and
   opened in chunks, instead of as a whole.

   Besides the chunks being individually encrypted and authenticated,
   the chunks protect two other pieces of information:

   1.  the order of the chunks (the sequence number of each chunk),
       which is included in the nonce of each chunk.

   2.  which chunk is the final chunk, which is indicated by a sentinel
       in the AAD of the final chunk.

   The format of the outer packaging that carries the chunks (the length
   fields, specifically) is not explicitly authenticated.  AEADs already
   prevent truncation attacks on individual chunks.  This also allows
   the chunks to be transported with different structures, and still be
   valid as long as the order and finality are preserved.

5.1.  Request encapsulation

   For requests, the setup of the HPKE context and the encrypted request
   header is the same as the non-streamed variant.

   hdr = concat(encode(1, key_id),
                encode(2, kem_id),
                encode(2, kdf_id),
                encode(2, aead_id))
   info = concat(encode_str("message/bhttp request"),
                 encode(1, 0),
                 hdr)
   enc, sctxt = SetupBaseS(pkR, info)
   enc_request_hdr = concat(hdr, enc)

   Each chunk is sealed using the HPKE context.  For non-final chunks,
   the AAD is empty.  The final chunk in a request uses an AAD of the
   string "final".  HPKE already maintains a sequence number for sealing
   operations as part of the context, so the order of chunks is
   protected.

   sealed_chunk = sctxt.Seal("", chunk)
   ...
   sealed_final_chunk = sctxt.Seal("final", final_chunk)

5.2.  Response encapsulation

   For responses, the first piece of data sent back is the response
   nonce, as in the non-streamed variant.

   response_nonce = random(max(Nn, Nk))

   Each chunk is sealed using the same AEAD key and AEAD nonce that are
   derived for the non-streamed variant.  The nonce additionally is
   XORed with a counter to indicate the order of the chunks.  For non-
   final chunks, the AAD is empty.  The final chunk in a response uses
   an AAD of the string "final".

   secret = context.Export("message/bhttp response", Nk)
   response_nonce = random(max(Nn, Nk))
   salt = concat(enc, response_nonce)
   prk = Extract(salt, secret)
   aead_key = Expand(prk, "key", Nk)
   aead_nonce = Expand(prk, "nonce", Nn)

   counter = 0

   nonce = aead_nonce XOR encode(Nn, counter)
   sealed_chunk = Seal(aead_key, nonce, "", chunk)
   counter++
   ...
   nonce = aead_nonce XOR encode(Nn, counter)
   sealed_final_chunk = Seal(aead_key, nonce, "final", final_chunk)

6.  Security Considerations

   TODO Security

7.  IANA Considerations

   This document updates the "Media Types" registry at
   https://iana.org/assignments/media-types
   (https://iana.org/assignments/media-types) to add the media types
   "message/ohttp-streamed req" (Section 7.1), and "message/ohttp-
   streamed-res" (Section 7.2), following the procedures of [RFC6838].

7.1.  message/ohttp-streamed-req Media Type

   The "message/ohttp-streamed-req" identifies an encrypted binary HTTP
   request that is transmitted using streamed chunks.  This is a binary
   format that is defined in Section 3.

   Type name:  message
   Subtype name:  ohttp-streamed-req
   Required parameters:  N/A
   Optional parameters:  N/A
   Encoding considerations:  "binary"
   Security considerations:  see Section 6
   Interoperability considerations:  N/A
   Published specification:  this specification
   Applications that use this media type:  Oblivious HTTP and
      applications that use Oblivious HTTP use this media type to
      identify encapsulated binary HTTP requests sent in streamed
      chunks.
   Fragment identifier considerations:  N/A
   Additional information:  Magic number(s):  N/A
                            Deprecated alias names for this type:  N/A
                            File extension(s):  N/A
                            Macintosh file type code(s):  N/A
   Person and email address to contact for further information:  see Aut
      hors' Addresses section
   Intended usage:  COMMON
   Restrictions on usage:  N/A
   Author:  see Authors' Addresses section
   Change controller:  IETF

7.2.  message/ohttp-streamed-res Media Type

   The "message/ohttp-res" identifies an encrypted binary HTTP response
   that is transmitted using streamed chunks.  This is a binary format
   that is defined in Section 4.

   Type name:  message
   Subtype name:  ohttp-streamed-res
   Required parameters:  N/A
   Optional parameters:  N/A
   Encoding considerations:  "binary"
   Security considerations:  see Section 6
   Interoperability considerations:  N/A
   Published specification:  this specification
   Applications that use this media type:  Oblivious HTTP and
      applications that use Oblivious HTTP use this media type to
      identify encapsulated binary HTTP responses sent in streamed
      chunks.
   Fragment identifier considerations:  N/A
   Additional information:  Magic number(s):  N/A
                            Deprecated alias names for this type:  N/A
                            File extension(s):  N/A
                            Macintosh file type code(s):  N/A
   Person and email address to contact for further information:  see Aut
      hors' Addresses section
   Intended usage:  COMMON
   Restrictions on usage:  N/A
   Author:  see Authors' Addresses section
   Change controller:  IETF

8.  Normative References

   [HPKE]     Barnes, R., Bhargavan, K., Lipp, B., and C. Wood, "Hybrid
              Public Key Encryption", RFC 9180, DOI 10.17487/RFC9180,
              February 2022, <https://www.rfc-editor.org/rfc/rfc9180>.

   [OHTTP]    Thomson, M. and C. A. Wood, "Oblivious HTTP", Work in
              Progress, Internet-Draft, draft-ietf-ohai-ohttp-08, 15
              March 2023, <https://datatracker.ietf.org/doc/html/draft-
              ietf-ohai-ohttp-08>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC6838]  Freed, N., Klensin, J., and T. Hansen, "Media Type
              Specifications and Registration Procedures", BCP 13,
              RFC 6838, DOI 10.17487/RFC6838, January 2013,
              <https://www.rfc-editor.org/rfc/rfc6838>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Tommy Pauly
   Apple
   Email: tpauly@apple.com
